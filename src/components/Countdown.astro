---
interface Props {
  targetDate: Date;
  targetTime: string;
  endTime: string;
  location: string;
}

const { targetDate, targetTime, endTime, location } = Astro.props;
---

<div
  class="bg-white border-4 border-[#333333] rounded-3xl shadow-[8px_8px_0_#333333] p-4"
  data-next-meetup-date={targetDate.toISOString()}
  data-next-meetup-time={targetTime}
>
  <div class="grid grid-cols-2 sm:grid-cols-4 gap-2 sm:gap-4 text-center">
    <div class="countdown-item">
      <span class="days block text-3xl sm:text-4xl md:text-6xl font-black"
        >00</span
      >
      <span class="text-xs sm:text-sm uppercase tracking-wide">Days</span>
    </div>
    <div class="countdown-item">
      <span class="hours block text-3xl sm:text-4xl md:text-6xl font-black"
        >00</span
      >
      <span class="text-xs sm:text-sm uppercase tracking-wide">Hours</span>
    </div>
    <div class="countdown-item">
      <span class="minutes block text-3xl sm:text-4xl md:text-6xl font-black"
        >00</span
      >
      <span class="text-xs sm:text-sm uppercase tracking-wide">Minutes</span>
    </div>
    <div class="countdown-item">
      <span class="seconds block text-3xl sm:text-4xl md:text-6xl font-black"
        >00</span
      >
      <span class="text-xs sm:text-sm uppercase tracking-wide">Seconds</span>
    </div>
  </div>
</div>

<script>
  function updateCountdown() {
    const container = document.querySelector("[data-next-meetup-date]");
    if (!container) return;

    const dateStr = container.getAttribute("data-next-meetup-date");
    const timeStr = container.getAttribute("data-next-meetup-time");
    if (!dateStr || !timeStr) return;

    // Combine date and time
    const [eventHours, eventMinutes] = timeStr.split(":");
    const nextMeetupDate = new Date(dateStr);
    nextMeetupDate.setHours(parseInt(eventHours), parseInt(eventMinutes), 0, 0);

    const now = new Date();
    const diff = nextMeetupDate.getTime() - now.getTime();

    if (diff <= 0) {
      window.location.reload();
      return;
    }

    const remainingDays = Math.floor(diff / (1000 * 60 * 60 * 24));
    const remainingHours = Math.floor(
      (diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
    );
    const remainingMinutes = Math.floor(
      (diff % (1000 * 60 * 60)) / (1000 * 60)
    );
    const remainingSeconds = Math.floor((diff % (1000 * 60)) / 1000);

    const daysElement = document.querySelector(".days");
    const hoursElement = document.querySelector(".hours");
    const minutesElement = document.querySelector(".minutes");
    const secondsElement = document.querySelector(".seconds");

    if (daysElement && hoursElement && minutesElement && secondsElement) {
      daysElement.textContent = remainingDays.toString().padStart(2, "0");
      hoursElement.textContent = remainingHours.toString().padStart(2, "0");
      minutesElement.textContent = remainingMinutes.toString().padStart(2, "0");
      secondsElement.textContent = remainingSeconds.toString().padStart(2, "0");
    }
  }

  // Update countdown every second
  setInterval(updateCountdown, 1000);
  // Initial update
  updateCountdown();
</script>
